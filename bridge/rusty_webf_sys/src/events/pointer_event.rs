// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
pub struct PointerEventRustMethods {
  pub version: c_double,
  pub mouse_event: MouseEventRustMethods,
  pub height: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub is_primary: extern "C" fn(ptr: *const OpaquePtr) -> i32,
  pub pointer_id: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub pointer_type: extern "C" fn(ptr: *const OpaquePtr) -> AtomicStringRef,
  pub pressure: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub tangential_pressure: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub tilt_x: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub tilt_y: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub twist: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
  pub width: extern "C" fn(ptr: *const OpaquePtr) -> c_double,
}
pub struct PointerEvent {
  pub mouse_event: MouseEvent,
  method_pointer: *const PointerEventRustMethods,
}
impl PointerEvent {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const PointerEventRustMethods, status: *const RustValueStatus) -> PointerEvent {
    unsafe {
      PointerEvent {
        mouse_event: MouseEvent::initialize(
          ptr,
          context,
          &(method_pointer).as_ref().unwrap().mouse_event,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.mouse_event.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.mouse_event.context()
  }
  pub fn height(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).height)(self.ptr())
    };
    value
  }
  pub fn is_primary(&self) -> bool {
    let value = unsafe {
      ((*self.method_pointer).is_primary)(self.ptr())
    };
    value != 0
  }
  pub fn pointer_id(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).pointer_id)(self.ptr())
    };
    value
  }
  pub fn pointer_type(&self) -> String {
    let value = unsafe {
      ((*self.method_pointer).pointer_type)(self.ptr())
    };
    value.to_string()
  }
  pub fn pressure(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).pressure)(self.ptr())
    };
    value
  }
  pub fn tangential_pressure(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).tangential_pressure)(self.ptr())
    };
    value
  }
  pub fn tilt_x(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).tilt_x)(self.ptr())
    };
    value
  }
  pub fn tilt_y(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).tilt_y)(self.ptr())
    };
    value
  }
  pub fn twist(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).twist)(self.ptr())
    };
    value
  }
  pub fn width(&self) -> f64 {
    let value = unsafe {
      ((*self.method_pointer).width)(self.ptr())
    };
    value
  }
}
pub trait PointerEventMethods: MouseEventMethods {
  fn height(&self) -> f64;
  fn is_primary(&self) -> bool;
  fn pointer_id(&self) -> f64;
  fn pointer_type(&self) -> String;
  fn pressure(&self) -> f64;
  fn tangential_pressure(&self) -> f64;
  fn tilt_x(&self) -> f64;
  fn tilt_y(&self) -> f64;
  fn twist(&self) -> f64;
  fn width(&self) -> f64;
  fn as_pointer_event(&self) -> &PointerEvent;
}
impl PointerEventMethods for PointerEvent {
  fn height(&self) -> f64 {
    self.height()
  }
  fn is_primary(&self) -> bool {
    self.is_primary()
  }
  fn pointer_id(&self) -> f64 {
    self.pointer_id()
  }
  fn pointer_type(&self) -> String {
    self.pointer_type()
  }
  fn pressure(&self) -> f64 {
    self.pressure()
  }
  fn tangential_pressure(&self) -> f64 {
    self.tangential_pressure()
  }
  fn tilt_x(&self) -> f64 {
    self.tilt_x()
  }
  fn tilt_y(&self) -> f64 {
    self.tilt_y()
  }
  fn twist(&self) -> f64 {
    self.twist()
  }
  fn width(&self) -> f64 {
    self.width()
  }
  fn as_pointer_event(&self) -> &PointerEvent {
    self
  }
}
impl MouseEventMethods for PointerEvent {
  fn button(&self) -> f64 {
    self.mouse_event.button()
  }
  fn client_x(&self) -> f64 {
    self.mouse_event.client_x()
  }
  fn client_y(&self) -> f64 {
    self.mouse_event.client_y()
  }
  fn offset_x(&self) -> f64 {
    self.mouse_event.offset_x()
  }
  fn offset_y(&self) -> f64 {
    self.mouse_event.offset_y()
  }
  fn as_mouse_event(&self) -> &MouseEvent {
    &self.mouse_event
  }
}
impl UIEventMethods for PointerEvent {
  fn detail(&self) -> f64 {
    self.mouse_event.ui_event.detail()
  }
  fn view(&self) -> Window {
    self.mouse_event.ui_event.view()
  }
  fn which(&self) -> f64 {
    self.mouse_event.ui_event.which()
  }
  fn as_ui_event(&self) -> &UIEvent {
    &self.mouse_event.ui_event
  }
}
impl EventMethods for PointerEvent {
  fn bubbles(&self) -> bool {
    self.mouse_event.ui_event.event.bubbles()
  }
  fn cancel_bubble(&self) -> bool {
    self.mouse_event.ui_event.event.cancel_bubble()
  }
  fn set_cancel_bubble(&self, value: bool, exception_state: &ExceptionState) -> Result<(), String> {
    self.mouse_event.ui_event.event.set_cancel_bubble(value, exception_state)
  }
  fn cancelable(&self) -> bool {
    self.mouse_event.ui_event.event.cancelable()
  }
  fn current_target(&self) -> EventTarget {
    self.mouse_event.ui_event.event.current_target()
  }
  fn default_prevented(&self) -> bool {
    self.mouse_event.ui_event.event.default_prevented()
  }
  fn src_element(&self) -> EventTarget {
    self.mouse_event.ui_event.event.src_element()
  }
  fn target(&self) -> EventTarget {
    self.mouse_event.ui_event.event.target()
  }
  fn is_trusted(&self) -> bool {
    self.mouse_event.ui_event.event.is_trusted()
  }
  fn time_stamp(&self) -> f64 {
    self.mouse_event.ui_event.event.time_stamp()
  }
  fn type_(&self) -> String {
    self.mouse_event.ui_event.event.type_()
  }
  fn init_event(&self, type_: &str, bubbles: bool, cancelable: bool, exception_state: &ExceptionState) -> Result<(), String> {
    self.mouse_event.ui_event.event.init_event(type_, bubbles, cancelable, exception_state)
  }
  fn prevent_default(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.mouse_event.ui_event.event.prevent_default(exception_state)
  }
  fn stop_immediate_propagation(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.mouse_event.ui_event.event.stop_immediate_propagation(exception_state)
  }
  fn stop_propagation(&self, exception_state: &ExceptionState) -> Result<(), String> {
    self.mouse_event.ui_event.event.stop_propagation(exception_state)
  }
  fn as_event(&self) -> &Event {
    &self.mouse_event.ui_event.event
  }
}
impl ExecutingContext {
  pub fn create_pointer_event(&self, event_type: &str, exception_state: &ExceptionState) -> Result<PointerEvent, String> {
    let event_type_c_string = CString::new(event_type).unwrap();
    let new_event = unsafe {
      ((*self.method_pointer()).create_pointer_event)(self.ptr, event_type_c_string.as_ptr(), exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self));
    }
    return Ok(PointerEvent::initialize(new_event.value, self, new_event.method_pointer, new_event.status));
  }
  pub fn create_pointer_event_with_options(&self, event_type: &str, options: &PointerEventInit,  exception_state: &ExceptionState) -> Result<PointerEvent, String> {
    let event_type_c_string = CString::new(event_type).unwrap();
    let new_event = unsafe {
      ((*self.method_pointer()).create_pointer_event_with_options)(self.ptr, event_type_c_string.as_ptr(), options, exception_state.ptr)
    };
    if exception_state.has_exception() {
      return Err(exception_state.stringify(self));
    }
    return Ok(PointerEvent::initialize(new_event.value, self, new_event.method_pointer, new_event.status));
  }
}
