// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
/*
* Copyright (C) 2022-present The WebF authors. All rights reserved.
*/
use std::ffi::*;
use crate::*;
#[repr(C)]
pub struct PerformanceMarkRustMethods {
  pub version: c_double,
  pub performance_entry: PerformanceEntryRustMethods,
  pub detail: extern "C" fn(ptr: *const OpaquePtr, exception_state: *const OpaquePtr) -> NativeValue,
}
pub struct PerformanceMark {
  pub performance_entry: PerformanceEntry,
  method_pointer: *const PerformanceMarkRustMethods,
}
impl PerformanceMark {
  pub fn initialize(ptr: *const OpaquePtr, context: *const ExecutingContext, method_pointer: *const PerformanceMarkRustMethods, status: *const RustValueStatus) -> PerformanceMark {
    unsafe {
      PerformanceMark {
        performance_entry: PerformanceEntry::initialize(
          ptr,
          context,
          &(method_pointer).as_ref().unwrap().performance_entry,
          status,
        ),
        method_pointer,
      }
    }
  }
  pub fn ptr(&self) -> *const OpaquePtr {
    self.performance_entry.ptr()
  }
  pub fn context<'a>(&self) -> &'a ExecutingContext {
    self.performance_entry.context()
  }
  pub fn detail(&self, exception_state: &ExceptionState) -> NativeValue {
    let value = unsafe {
      ((*self.method_pointer).detail)(self.ptr(), exception_state.ptr)
    };
    value
  }
}
pub trait PerformanceMarkMethods: PerformanceEntryMethods {
  fn detail(&self, exception_state: &ExceptionState) -> NativeValue;
  fn as_performance_mark(&self) -> &PerformanceMark;
}
impl PerformanceMarkMethods for PerformanceMark {
  fn detail(&self, exception_state: &ExceptionState) -> NativeValue {
    self.detail(exception_state)
  }
  fn as_performance_mark(&self) -> &PerformanceMark {
    self
  }
}
impl PerformanceEntryMethods for PerformanceMark {
  fn name(&self) -> String {
    self.performance_entry.name()
  }
  fn entry_type(&self) -> String {
    self.performance_entry.entry_type()
  }
  fn start_time(&self) -> i64 {
    self.performance_entry.start_time()
  }
  fn duration(&self) -> i64 {
    self.performance_entry.duration()
  }
  fn to_json(&self, exception_state: &ExceptionState) -> Result<NativeValue, String> {
    self.performance_entry.to_json(exception_state)
  }
  fn as_performance_entry(&self) -> &PerformanceEntry {
    &self.performance_entry
  }
}
