// Generated by WebF TSDL, don't edit this file directly.
// Generate command: node scripts/generate_binding_code.js
// clang-format off
/*
 * Copyright (C) 2022-present The WebF authors. All rights reserved.
 */
#ifndef WEBF_CORE_WEBF_API_PLUGIN_API_PERFORMANCE_H_
#define WEBF_CORE_WEBF_API_PLUGIN_API_PERFORMANCE_H_
#include <stdint.h>
#include "core/native/vector_value_ref.h"
#include "rust_readable.h"
#include "webf_value.h"
namespace webf {
class PerformanceEntry;
typedef struct PerformanceEntryPublicMethods PerformanceEntryPublicMethods;
typedef struct WebFPerformanceMarkOptions WebFPerformanceMarkOptions;
class SharedExceptionState;
class ExecutingContext;
typedef struct NativeValue NativeValue;
typedef struct AtomicStringRef AtomicStringRef;
class Performance;
enum class PerformanceType {
  kPerformance = 0,
};
using PublicPerformanceGetTimeOrigin = int64_t (*)(Performance*);
using PublicPerformanceNow = int64_t (*)(Performance*, SharedExceptionState*);
using PublicPerformanceWebfNavigationSummary = AtomicStringRef (*)(Performance*, SharedExceptionState*);
using PublicPerformanceToJSON = NativeValue (*)(Performance*, SharedExceptionState*);
using PublicPerformanceGetEntries = VectorValueRef (*)(Performance*, SharedExceptionState*);
using PublicPerformanceGetEntriesByType = VectorValueRef (*)(Performance*, const char*, SharedExceptionState*);
using PublicPerformanceGetEntriesByName = VectorValueRef (*)(Performance*, const char*, const char*, SharedExceptionState*);
using PublicPerformanceMark = void (*)(Performance*, const char*, WebFPerformanceMarkOptions*, SharedExceptionState*);
using PublicPerformanceMeasure = void (*)(Performance*, const char*, NativeValue, const char*, SharedExceptionState*);
using PublicPerformanceClearMarks = void (*)(Performance*, const char*, SharedExceptionState*);
using PublicPerformanceClearMeasures = void (*)(Performance*, const char*, SharedExceptionState*);
using PublicPerformanceRelease = void (*)(Performance*);
using PublicPerformanceDynamicTo = WebFValue<Performance, WebFPublicMethods> (*)(Performance*, PerformanceType);
struct PerformancePublicMethods : public WebFPublicMethods {
  static int64_t TimeOrigin(Performance* performance);
  static int64_t Now(Performance* performance, SharedExceptionState* shared_exception_state);
  static AtomicStringRef WebfNavigationSummary(Performance* performance, SharedExceptionState* shared_exception_state);
  static NativeValue ToJSON(Performance* performance, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetEntries(Performance* performance, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetEntriesByType(Performance* performance, const char* entry_type, SharedExceptionState* shared_exception_state);
  static VectorValueRef GetEntriesByName(Performance* performance, const char* name, const char* type, SharedExceptionState* shared_exception_state);
  static void Mark(Performance* performance, const char* name, WebFPerformanceMarkOptions* options, SharedExceptionState* shared_exception_state);
  static void Measure(Performance* performance, const char* name, NativeValue start_mark, const char* end_mark, SharedExceptionState* shared_exception_state);
  static void ClearMarks(Performance* performance, const char* name, SharedExceptionState* shared_exception_state);
  static void ClearMeasures(Performance* performance, const char* name, SharedExceptionState* shared_exception_state);
  static void Release(Performance* performance);
  static WebFValue<Performance, WebFPublicMethods> DynamicTo(Performance* performance, PerformanceType performance_type);
  double version{1.0};
  PublicPerformanceGetTimeOrigin performance_get_time_origin{TimeOrigin};
  PublicPerformanceNow performance_now{Now};
  PublicPerformanceWebfNavigationSummary performance_webf_navigation_summary{WebfNavigationSummary};
  PublicPerformanceToJSON performance_to_json{ToJSON};
  PublicPerformanceGetEntries performance_get_entries{GetEntries};
  PublicPerformanceGetEntriesByType performance_get_entries_by_type{GetEntriesByType};
  PublicPerformanceGetEntriesByName performance_get_entries_by_name{GetEntriesByName};
  PublicPerformanceMark performance_mark{Mark};
  PublicPerformanceMeasure performance_measure{Measure};
  PublicPerformanceClearMarks performance_clear_marks{ClearMarks};
  PublicPerformanceClearMeasures performance_clear_measures{ClearMeasures};
  PublicPerformanceRelease performance_release{Release};
  PublicPerformanceDynamicTo performance_dynamic_to{DynamicTo};
};
}  // namespace webf
#endif  // WEBF_CORE_WEBF_API_PLUGIN_API_PERFORMANCE_H_
