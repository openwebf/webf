// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by webf codegen --flutter-package-src=./webf_modules/video_player --framework=react <distPath>
// ignore_for_file: avoid_unused_constructor_parameters
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: implementation_imports
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: prefer_void_to_null
import 'package:webf/webf.dart';
abstract class FlutterVideoPlayerBindings extends WidgetElement {
  FlutterVideoPlayerBindings(super.context);
  String? get src;
  set src(value);
  bool get autoplay;
  set autoplay(value);
  bool get muted;
  set muted(value);
  bool get loop;
  set loop(value);
  bool get controls;
  set controls(value);
  double? get volume;
  set volume(value);
  double? get playbackRate;
  set playbackRate(value);
  double? get currentTime;
  set currentTime(value);
  double? get duration;
  set duration(value);
  bool get paused;
  set paused(value);
  bool get ended;
  set ended(value);
  @override
  void initializeAttributes(Map<String, ElementAttributeProperty> attributes) {
    super.initializeAttributes(attributes);
    attributes['src'] = ElementAttributeProperty(
      getter: () => src?.toString(),
      setter: (value) => src = value,
      deleter: () => src = null
    );
    attributes['autoplay'] = ElementAttributeProperty(
      getter: () => autoplay.toString(),
      setter: (value) => autoplay = value == 'true' || value == '',
      deleter: () => autoplay = false
    );
    attributes['muted'] = ElementAttributeProperty(
      getter: () => muted.toString(),
      setter: (value) => muted = value == 'true' || value == '',
      deleter: () => muted = false
    );
    attributes['loop'] = ElementAttributeProperty(
      getter: () => loop.toString(),
      setter: (value) => loop = value == 'true' || value == '',
      deleter: () => loop = false
    );
    attributes['controls'] = ElementAttributeProperty(
      getter: () => controls.toString(),
      setter: (value) => controls = value == 'true' || value == '',
      deleter: () => controls = false
    );
    attributes['volume'] = ElementAttributeProperty(
      getter: () => volume?.toString(),
      setter: (value) => volume = double.tryParse(value) ?? 0.0,
      deleter: () => volume = 0.0
    );
    attributes['playback-rate'] = ElementAttributeProperty(
      getter: () => playbackRate?.toString(),
      setter: (value) => playbackRate = double.tryParse(value) ?? 0.0,
      deleter: () => playbackRate = 0.0
    );
    attributes['current-time'] = ElementAttributeProperty(
      getter: () => currentTime?.toString(),
      setter: (value) => currentTime = double.tryParse(value) ?? 0.0,
      deleter: () => currentTime = 0.0
    );
    attributes['duration'] = ElementAttributeProperty(
      getter: () => duration?.toString(),
      setter: (value) => duration = double.tryParse(value) ?? 0.0,
      deleter: () => duration = 0.0
    );
    attributes['paused'] = ElementAttributeProperty(
      getter: () => paused.toString(),
      setter: (value) => paused = value == 'true' || value == '',
      deleter: () => paused = false
    );
    attributes['ended'] = ElementAttributeProperty(
      getter: () => ended.toString(),
      setter: (value) => ended = value == 'true' || value == '',
      deleter: () => ended = false
    );
  }
  static StaticDefinedBindingPropertyMap flutterVideoPlayerProperties = {
    'src': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).src,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).src = value,
    ),
    'autoplay': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).autoplay,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).autoplay = value,
    ),
    'muted': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).muted,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).muted = value,
    ),
    'loop': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).loop,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).loop = value,
    ),
    'controls': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).controls,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).controls = value,
    ),
    'volume': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).volume,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).volume = value,
    ),
    'playbackRate': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).playbackRate,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).playbackRate = value,
    ),
    'currentTime': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).currentTime,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).currentTime = value,
    ),
    'duration': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).duration,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).duration = value,
    ),
    'paused': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).paused,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).paused = value,
    ),
    'ended': StaticDefinedBindingProperty(
      getter: (element) => castToType<FlutterVideoPlayerBindings>(element).ended,
      setter: (element, value) =>
      castToType<FlutterVideoPlayerBindings>(element).ended = value,
    ),
  };
  @override
  List<StaticDefinedBindingPropertyMap> get properties => [
    ...super.properties,
    flutterVideoPlayerProperties,
  ];
}